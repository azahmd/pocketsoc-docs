{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PocketSOC Documentation","text":"<p>Welcome to the official documentation for PocketSOC. PocketSOC is a SOC training platform that leverages open-source tools such as Docker, Portainer, Zeek, MISP, OpenSearch, Logstash to deploy Security Operation Center (SOC) training environment, referred to as PocketSOC.</p> <p>The tools and technologies mentioned - Docker, Portainer, Zeek, MISP, OpenSearch, Logstash are commonly used in cybersecurity and SOC environments.</p> <p>All of these components run as Docker Containers on a VM which provides one instance of PocketSOC for a trainee. Attendees interact with their PocketSOC instance using Portainer, which runs on each VM and provides a web UI to interact with each of the containers running on a host.</p> <p>A head node, running on one VM, is used as the main or controller node of the PocketSOC. It uses Ansible to run these Docker containers on X Managed nodes. </p>"},{"location":"#overview","title":"Overview","text":"<p>This documentation will guide you through:</p> <ul> <li>Setting up the environment.</li> <li>Installation and configuration.</li> <li>Deployment for admin.</li> <li>Access for the trainee.</li> </ul>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    Admin/\n        deployment.md\n        design.md \n    Trainees/\n        access.md\n        excercise_one.md\n        excercise_two.md\n        excercise_three.md\n        excercise_four.md\n        excercise_five.md\n        excercise_six.md\n        images/\n        ...   # All the images      \n    ...       # Other pages, images and files.\n</code></pre>"},{"location":"#about","title":"About","text":"<p>As part of improving STFC\u2019s cybersecurity posture, the SOC is being set up to address network traffic monitoring capability shortfalls. Since this project was spawned from the Tier-1, and the Tier-1 is part of the Worldwide LHC Computing Grid (WLCG), this is a key forum for us through which knowledge on security in research computing is shared. Security is often a part of this - in fact there is a specific Thematic CERN School of Computing (tCSC) dedicated to security. At tCSC there is a section on SOCs, and PocketSOC is the tool used to give trainees a dedicated training environment.</p>"},{"location":"Admin/deployment/","title":"Deployment Overview","text":"<p>The PocketSOC architecture includes several key components:</p> <ul> <li>Portainer: Provides a web-based UI for managing docker containers.</li> <li>MISP: Threat Intelligence platform that allows collecting and sharing threat information.</li> <li>Zeek: Network traffic analysis tool that monitors and logs network activity.</li> <li>Logstash: Data processing pipeline used for Log parsing and forwarding.</li> <li>OpenSearch: Search and analytics engine used for storing, searching, and analysing logs.</li> <li>Docker &amp; Docker Compose: Orchestrating the containers that run these services.</li> </ul> <p>PocketSOC is designed to be easily deployable using Docker and Ansible playbooks. </p>"},{"location":"Admin/deployment/#installation","title":"Installation","text":"<p>This section will cover the steps to install PocketSOC on your system.</p>"},{"location":"Admin/deployment/#set-up-head-node","title":"Set up head node","text":"<p>Set up a VM from Cloud which will be used as a head node</p> <p>Install ansible using pip as per Ansible Documentation </p> <pre><code>python3 -m pip -V\n</code></pre> <p>If pip is available you will see something like this </p> <pre><code>pip 21.0.1 from /usr/lib/python3.9/site-packages/pip (python 3.9)\n</code></pre> <p>If you see <code>No module named pip</code> you will need to run</p> <pre><code>curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\npython3 get-pip.py --user\n</code></pre> <p>Use pip to install ansible and verify</p> <pre><code>python3 -m pip install --user ansible\n\npython3 -m pip show ansible OR ansible --version\n</code></pre> <p>Generate ssh-key using <code>ssh-keygen</code></p> <p>It will generate the private/public in <code>~/.ssh</code> as <code>id_rsa &amp;&amp; id_rsa.pub</code></p> <p>Copy the <code>id_rsa.pub</code> key on to each managed nodes to <code>~/.ssh/authorized_keys</code></p> <p><code>ssh-copy-id -i ~/.ssh/id_rsa.pub &lt;IP&gt;</code></p>"},{"location":"Admin/deployment/#set-up-managed-nodes","title":"Set up managed nodes","text":"<ul> <li>Provision a set of VMs as managed nodes - Noting for each the node number and FQDN    </li> <li>Ensure the <code>~/.ssh/authorized_keys</code> includes head node public key on each node</li> </ul>"},{"location":"Admin/deployment/#deploy","title":"Deploy","text":"<p>On Head node, clone the Ansible repository <code>bash git clone https://github.com/azahmd/pocketsoc-ng-ansible</code></p> <p>Create or edit <code>inventory.ini</code> file and include your hosts/nodes.</p> <pre><code>[trainingvms]\nnode-1 ansible_host=&lt;node1_ip&gt; misp_port=&lt;some_port&gt;\nnode-2 ansible_host=&lt;node2_ip&gt; misp_port=&lt;some_port&gt;\nnode-3 ansible_host=&lt;node3_ip&gt; misp_port=&lt;some_port&gt;\nnode-4 ansible_host=&lt;node4_ip&gt; misp_port=&lt;some_port&gt;\nnode-5 ansible_host=&lt;node5_ip&gt; misp_port=&lt;some_port&gt;\n\n[trainingvms:vars]\nansible_user=root\nansible_ssh_private_key_file=~/.ssh/id_rsa\n\n</code></pre> <p>Start the ssh-agent</p> <pre><code>eval \"$(ssh-agent -s)\" \n\nssh-add ~/.ssh/ansible_id_rsa\n\n</code></pre> <p>If you don't want to run these long commands each time you want to run the ansible.  Create an alias for it.</p> <pre><code>alias ssha='eval $(ssh-agent -s) &amp;&amp; ssh-add ~/.ssh/id_rsa'\n</code></pre> <p>Ping to see the connection with the nodes.</p> <pre><code>ansible -i inventory.ini trainingvms -m ping\n</code></pre> <p>Run this command </p> <pre><code>ansible-playbook -i inventory.ini pocketsoc-ng.yml --extra-vars \"@pocketsoc-ng_var.env\"\n</code></pre> <p>To stop </p> <pre><code>ansible-playbook -i inventory.ini pocketsoc-ng-stop.yml --extra-vars \"@pocketsoc-ng_var.env\"\n</code></pre> <p>If you want to have a fresh installation you need to run <code>./cleanup.sh</code> on the managed hosts for a clean start.</p> <p><code>./cleanup.sh</code> includes</p> <pre><code>sudo docker stop $(sudo docker ps -a -q)\ndocker stop portainer\ndocker container prune\ndocker volume rm portainer_data\n</code></pre>"},{"location":"Admin/deployment/#set-up-haproxy-node","title":"Set up haproxy node","text":"<ul> <li>Provision a separate VM</li> <li>Generate a certificate for <code>haproxy-fqdn</code></li> <li>Include this configuration to <code>haproxy.cfg</code> in <code>/etc/haproxy</code></li> <li>Open the required ports</li> <li>To restart or check status after updating haproxy.cfg <code>systemctl status haproxy</code> and <code>systemctl restart haproxy</code></li> </ul> <pre><code>global\n    log /dev/log local0\n    log /dev/log local1 notice\n    maxconn 4096\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    log     global\n    mode    http\n    option  httplog\n    option  dontlognull\n    timeout connect 5000ms\n    timeout client  50000ms\n    timeout server  50000ms\n\nfrontend http_frontend\n    bind *:80\n    redirect scheme https code 301\n\nfrontend https_frontend\n    bind *:443 ssl crt /etc/ssl/private/haproxy.pem\n    bind *:1001-1040 ssl crt /etc/ssl/private/haproxy.pem\n    bind *:2001-2040 ssl crt /etc/ssl/private/haproxy.pem\n\n    acl portainer dst_port 1001\n    acl portainer2 dst_port 2001\n\n    acl opensearch dst_port 1002\n    acl opensearch2 dst_port 2002\n\n    acl misp dst_port 1003\n    acl misp2 dst_port 2003\n\n    use_backend portainer if portainer\n    use_backend portainer2 if portainer2\n\n    use_backend opensearch if opensearch\n    use_backend opensearch2 if opensearch2\n\n    use_backend misp if misp\n    use_backend misp2 if misp2\n\ndefault_backend default\n\nbackend portainer\n    server portainer_node1 &lt;NODE1_FQDN&gt;:9443 check ssl verify none\n\nbackend portainer2\n    server portainer_node2 &lt;NODE2_FQDN&gt;:9443 check ssl verify none\n\nbackend opensearch\n    server opensearch_node1 &lt;NODE1_FQDN&gt;:5601 check ssl verify none\n\nbackend opensearch2\n    server opensearch_node2 &lt;NODE2_FQDN&gt;:5601 check ssl verify none\n\nbackend misp\n    server misp_node1 &lt;NODE1_FQDN&gt;:1003 check ssl verify none\n\nbackend misp2\n    server misp_node2 &lt;NODE2_FQDN&gt;:2003 check ssl verify none\n\nbackend default\n    http-request deny\n\n</code></pre>"},{"location":"Admin/design/","title":"Design Overview","text":"<p>This is how the PocketSOC architecture works:</p> <ul> <li>Everything is on a private network</li> <li> <p>Small amount of traffic: lets us focus on things that we trigger </p> </li> <li> <p>Main communication is between client and webserver</p> <ul> <li>The only command needed here on client is curl webserver</li> </ul> </li> <li> <p>Traffic is routed through router which mirrors it to zeek</p> </li> <li>Zeek runs in \"standalone\" mode, which uses one core for processing and reduces other complexity<ul> <li>good enough for our purposes!</li> <li>zeek here uses the pre-packaged CentOS9 binaries</li> </ul> </li> <li> <p>Zeek also runs filebeat which ships logs, in JSON format, to logstash</p> </li> <li> <p>Logstash then processes the logs and ships them to opensearch</p> </li> <li> <p>OpenSearch and OpenSearch dashboards use the basic example from opensearch.org</p> <ul> <li>Don't use in production!</li> </ul> </li> <li>Misp uses JISC docker deployment</li> </ul>"},{"location":"Admin/design/#architecture","title":"Architecture","text":"<p>The PocketSOC architecture includes several components:</p> <p></p>"},{"location":"Trainees/access/","title":"Access","text":"<ul> <li> <p>We have enough instances for you to work with.</p> </li> <li> <p>Each user is able to access their individual containers.</p> </li> <li> <p>The connection goes through the available proxy host, which then redirects you to the relevant application.</p> </li> <li> <p>Here's how you can access your applications:</p> <ul> <li>Suppose you have been assigned <code>node-1</code>.</li> <li> <p>To access Portainer, append the following to the URL:</p> <p><code>host-192-168-1-100.something.com:1001</code></p> </li> <li> <p>Similarily, to access OpenSearch, append the following to the URL:</p> <p><code>host-192-168-1-100.something.com:1002</code></p> </li> <li> <p>Finally, to access MISP, append the following to the URL: </p> <p><code>host-192-168-1-100.something.com:1003</code></p> </li> </ul> </li> <li> <p>If you have been assigned <code>node-2</code>, you will be using the ports <code>2001</code>, <code>2002</code>, <code>2003</code></p> </li> </ul>"},{"location":"Trainees/exercise_five/","title":"Exercise 5: Analyse traffic in OpenSearch Dashboards","text":"<p>We'll now look at the results of the processing of the traffic you just generated in Opensearch Dashboards.</p> <ol> <li>You should see a spike in traffic from the timestamp where you generated it; or, search for the webserver IP address.</li> <li>Note in the current build of this environment, zeek may not trigger the <code>file</code> or <code>http</code> analysis; otherwise you would also be able to see <code>zeek-file</code> and <code>zeek-http</code> types available with additional information - including the checksum of the file downloaded.</li> <li>Use the magnifying glass to explore the record for one of the connections</li> </ol>"},{"location":"Trainees/exercise_four/","title":"Exercise 4: Generate some traffic","text":"<p>The traffic you can see already is background - DNS requests, etc. We now want to generate some traffic of our own that we can identify</p> <ol> <li>In a Portainer tab, look for the client container and open a terminal</li> <li>Do a simple <code>curl</code> command to download a \"payload\" from our webserver <code>curl http://webserver -o payload</code></li> <li>Let's check the MD5 checksum of this file  <code>md5sum payload</code> </li> <li>This forms an extremely simple analysis, but gives us enough to go back to the Dashboards tab  </li> <li>Before continuing, take a note of the IP address of the webserver, <code>dig webserver</code> </li> <li>If you would like to pull benign data from an external source into another payload file, also take a note of the checksum that is generated  </li> </ol>"},{"location":"Trainees/exercise_one/","title":"Exercise 1: Portainer","text":"<p>In the first exercise, we'll explore the Portainer interface which acts as the orchestrator for this environment. </p> <ol> <li>Open a new window or tab using the link on the front page of these notes to open Portainer, and login with the credentials provided </li> <li>The main page you're presented with should look something like this, click on <code>local</code> environment  </li> <li>Click where it says <code>2 Stacks</code> </li> <li>Click on <code>pocketsoc-ng</code> </li> <li>If you scroll down the page, you'll see a list of containers </li> <li>To access the terminal for a given container, click on the <code>&gt;_</code> icon </li> <li>Explore the rest of the interface, which gives information on the deployment. You can always get back to the list of containers through the <code>Containers</code> link or <code>Stacks</code> followed by <code>pocketsoc-ng</code> as above</li> </ol>"},{"location":"Trainees/exercise_six/","title":"Exercise 6: MISP","text":"<p>Having generated some logs using zeek, we're now going to explore MISP.</p> <ol> <li>Use the link and credentials on the front page to access your MISP website </li> <li>You should see an \"Events\" page that's blank </li> <li>If you click on Automation at the bottom of the list of options on the left-hand side, you can find a very detailed set of docs on the API access for MISP. This includes a copy of your API key, so in general be careful when opening this page!</li> <li>For reference, if you wanted to sync to another instance, you would use the \"Remote Servers\" option under \"Sync Actions\" - if you have a look at this, click \"Home\" to get back to the main screen </li> <li>Before we create an event, we want to make sure that all our events will have a TLP setting. Go to \"Event Actions\" and select \"Taxonomies\" </li> <li>We want to require TLP and also highlight it: this will make it easier to select when creating an event. Click these two options for TLP and then the \"Play\" icon to enable (mousing over will confirm which icon to use): click OK to confirm. Then click \"enable all\" to enable all the tlp options. </li> <li>Let's now explore the \"add event\" option: this will allow us to generate an event based on the findings of our \"malicious\" webserver </li> <li>There are a number of options here: let's look at them:<ul> <li>Date: Set the date to when the event is being recorded or occurred</li> <li>Distribution:<ul> <li>Your organisation only: will not be shared outside this instance</li> <li>This community only: will only be shared with instances in your community</li> <li>Connected communities: will be shared with any communities connected to yours but no further</li> <li>All communities: will be shared with any MISP instance any number of hops from you</li> </ul> </li> <li>Threat level: severity of the event</li> <li>Analysis: allows you to specify whether these are your initial findings, part way through an extended analysis, or form the completed version of your findings</li> <li>Event Info: A brief description of the event</li> <li>Extends Event: Not used for a new incident, but could be used if you are basing your findings on another event</li> </ul> </li> <li>For Distribution, this can typically be used to set how far your event will be propagated: for our purposes we can stick with \"Your Organisation only\"</li> <li>Enter some explanatory text and options, and click \"Submit\". You will see some metadata about this event, with some useful warnings about things you may want to add to your event, like attributes! </li> <li>We're going to start by adding a TLP tag to our event to indicate the sharing level: this is good practice so that it's always clear which is why we have required it for all of our events.  </li> <li>We're going to use <code>tlp:amber</code>: choose from the dropdown and Submit.</li> <li>If you scroll down, you'll see another warning that we haven't included any attributes, so let's add some now.</li> <li>Good practice is, rather than adding individual attributes, to add objects. These allow you to add a set of related attributes - such as all the information about a file, for example, or all information about a URL or domain. </li> <li>We'll start by adding a \"network\" object. Go to Add Object, and start typing \"network\". Click on that option and you'll see another option dropdown - start typing \"domain\" and choose \"domain:ip\" </li> <li>This page lets us fill in all the information we have about given domain/ip. We can add:<ul> <li>IP: (the IP you identified earlier)</li> <li>You might also add first seen/last seen as today</li> </ul> </li> <li>It's good practice to put comments wherever you have the option to, so add comments both to the object itself and the individual attributes, then click Submit. You'll see a review of the information, then click \"Create new object\" if you're happy. MISP will attempt to validate your entries; if it finds an issue it will alert you before you can proceed. </li> <li>You can now see the attributes in the main event page. Note that MISP has highlighted the date in red as these attributes have not been \"published\" yet; i.e. it will not be propagated to sharing groups, and the attributes will not be available via the API </li> <li>MISP uses the idea of working on an \"unpublished\" event until it has been completed to a certain level: the full results of an initial analysis, for example, or attributes that have not been reviewed by a user with the rights to publish. This means that a team can work on an event safe in the knowledge that the attributes will not be published until a team leader, for example, has provided a cross check.</li> <li>To publish, click \"Publish no email\" on the left hand side. While we would normally inform users of a new event, we have no other users.</li> <li>If you return to the home screen and select the event again, you'll see that the dates attached to the attributes are no longer highlighted since the event has been published.</li> <li>You can also add additional objects - for example look for the \"file\" objects where you can add checksums and other file details.</li> </ol>"},{"location":"Trainees/exercise_three/","title":"Exercise 3: Explore the data","text":"<p>We want to narrow down the set of information being shown; by default, each record shows the full message being sent from zeek </p> <ol> <li>To set the data to live update, click the calendar icon at the top </li> <li>Set to refresh every 10 seconds (say) </li> <li>Under available fields on the left hand side, scroll and select <code>id.orig_h</code>, <code>id.resp_h</code>. What do these refer to?</li> <li>Most of the IPs will start <code>172.[].[].[]</code> - these are the private addresses being used in the environment. You might see other IPs - these will be most likely other addresses: you can check using <code>dig -x [].[].[].[]</code> on <code>lxplus</code>, for example</li> <li>Scroll through the other fields to see what is available, then add <code>type</code>: what types of data are being captured?</li> <li>Click on the arrow on the left hand side of a record to see a full readout of the information collected  </li> </ol> <p> 7. Compare the outputs for different type of zeek log using the <code>type</code> filter in opensearch dashboards </p>"},{"location":"Trainees/exercise_two/","title":"Exercise 2: OpenSearch","text":"<p>In this exercise, we'll setup the OpenSearch Dashboards interface. If you're familiar with OpenSearch Dashboards then feel free to skip ahead, otherwise follow these steps - this is a fresh installation.</p> <ol> <li>Log in using the credentials on the front page </li> <li>Select \"Explore on my own\" (Zeek will provide the data!) </li> <li>Dismiss the \"new Dashboards\" notice </li> <li>Confirm \"private tenant\" </li> <li>You should see this view </li> <li>Click the three bar menu in the top left and select \u201cDiscover\u201d </li> <li>Now we need to create an index pattern to select which records to display. Click on \u201cCreate index pattern\u201d </li> <li>You should see something like the following, with <code>opensearch-logstash-zeek-2023.10.12</code> </li> <li>Enter <code>opensearch-logstash-zeek-*</code> (this will match multiple days): Next step. </li> <li>Select @timestamp in the Time field </li> <li>You should see something like this </li> <li>From the menu select Discover again: at the top left of the window you\u2019ll see \u201cSelect a datasource\u201d : choose the index pattern you just created </li> <li>You should see some data: time to explore! </li> </ol>"}]}